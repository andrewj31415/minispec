#!/usr/bin/python3

# This script will be called from the command line by the user. It will handle all file i/o.

# example call: ./../minispec/visual/visual eightbitcounter.ms EightBitCounter

# Run
#  export NODE_OPTIONS=--max_old_space_size=8192
# in case of a JavaScript heap out-of-memory error.
# See https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory for more info.

import argparse, os, pathlib, subprocess
import time

import synth
import hardware
from hardware import *
from mtypes import *
import json

if __name__ == '__main__':
    total_start_time = time.time()

    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="Minispec(.ms) file containing the function or module to view")
    parser.add_argument("target", help="Name of the function or module to synthesize")
    parser.add_argument("--all", "-a", default=False, action="store_true", help="Layout all components recursively")
    parser.add_argument("--java", "-jv", default=False, action="store_true", help="Use the java version of elk")
    parser.add_argument("--canvas", "-c", default=False, action="store_true", help="Use the canvas element instead of the svg approach")
    parser.add_argument("--no_garbage_collection", "-ng", default=False, action="store_true", help="Do not remove unused hardware")
    parser.add_argument("--fixed_file", "-f", default=False, action="store_true", help="Generate an html document instead of launching a webserver")
    parser.add_argument("--max_heap_size", "-m", type=int, help="The maximum size of the layouting library heap, in gigabytes")
    args = parser.parse_args()

    if args.max_heap_size != None:
        print(f"Using max heap size {args.max_heap_size}gb for layouting library")

    currentPathString = os.getcwd()
    currentPath = pathlib.Path(currentPathString)
    targetFile = currentPath.joinpath(args.file)

    synthesisStartTime = time.time()

    def pullTextFromImport(filename: 'str') -> 'str':
        ''' Given the name of a file to import (eg, filename = "fourbitcounter"), returns the text
        of the corresponding minispec file in the current directory (eg, the text of "/fourbitcounter.ms")
        and throws an error if no such file exists. '''
        textFile = pathlib.Path(targetFile).with_name(filename + ".ms")
        print('looking at file', textFile)
        return textFile.read_text()

    sourceFilename = pathlib.Path(args.file).stem
    targetText = pullTextFromImport(sourceFilename) 
    topLevel = args.target
    sourceFilesCollect = []
    print('Synthesizing to hardware representation ...')
    synth.folding_constants_through_function_defs = True
    synthesizedComponent = synth.parseAndSynth(targetText, topLevel, sourceFilename, pullTextFromImport, sourceFilesCollect)
    if not args.no_garbage_collection:
        hardware.garbageCollection1(synthesizedComponent)
    vacuumIntoVectors(synthesizedComponent)
    setWireTypes(synthesizedComponent)
    print(f'Synthesis complete. Time: {time.time() - synthesisStartTime} seconds')

    componentJson: 'dict[str, Any]' = hardware.getELK(synthesizedComponent)

    absoluteFilePath = pathlib.Path(__file__).resolve()

    args.all = True  # TODO implement case when args.all is false
    if args.all:
        # Hardcode locations of all components recursively via ELKJS at compile time.

        # separate non-layout data before sending to library
        iFieldValues: 'dict[str, dict]' = {}  # maps element id's to python dictionaries
        def getIFieldValues(componentJson):
            # mutates componentJson
            if 'i' in componentJson:
                iFieldValues[componentJson['id']] = componentJson['i']
                del componentJson['i']
            if 'children' in componentJson:
                for child in componentJson['children']:
                    getIFieldValues(child)
            if 'edges' in componentJson:
                for edge in componentJson['edges']:
                    getIFieldValues(edge)
        getIFieldValues(componentJson)

        layoutStartTime = time.time()

        componentJsonString: 'str' = json.dumps(componentJson, separators=(',', ':'))

        if not args.java:
            # Use ELKJS to calculate the layout
            ELKcaller = absoluteFilePath.with_name("elk").joinpath("place.js")
            print("elkcaller", ELKcaller)
            print("Calculating layout ...")
            if args.max_heap_size:
                setJSHeapSize = f'--max_old_space_size={args.max_heap_size * 1024}'  # otherwise we may run out of memory for large diagrams
            p = subprocess.Popen(['node', *([setJSHeapSize] if args.max_heap_size else []), ELKcaller], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            jsOutput, jsError = p.communicate(componentJsonString.encode())
            print(f"Layout complete. Time: {time.time() - layoutStartTime} seconds")
            elkOutput = jsOutput
        else:
            # Use the java version of ELK to calculate the layout
            ELKJavacaller = absoluteFilePath.with_name("elkJava").joinpath("target/gs-maven-0.1.0.jar")
            print("elkcaller", ELKJavacaller)
            print("Calculating layout ...")
            setJavaHeapSize = f'-Xmx{args.max_heap_size}g'  # otherwise we may run out of memory for large diagrams
            # see https://stackoverflow.com/questions/28823052/stdout-from-python-to-stdin-java
            p = subprocess.Popen(['java', *([setJavaHeapSize] if args.max_heap_size else []), '-jar', ELKJavacaller], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            javaOutput, javaError = p.communicate(componentJsonString.encode())
            print(f"Layout complete. Time: {time.time() - layoutStartTime} seconds")
            elkOutput = javaOutput


        elkOutputJson = json.loads(elkOutput)
        def stripExtraInfo(jsonObj):
            # removes now-unneeded layouting info from jsonObj
            # reduces output file size
            for property in ['layoutOptions', 'properties', '$H']:
                if property in jsonObj:
                    del jsonObj[property]
            if 'children' in jsonObj:
                for child in jsonObj['children']:
                    stripExtraInfo(child)
        stripExtraInfo(elkOutputJson)
        def restoreIFieldValues(elkOutputJson):
            # re-adds non-layout information into the component
            if elkOutputJson['id'] in iFieldValues:
                elkOutputJson['i'] = iFieldValues[elkOutputJson['id']]
            if 'children' in elkOutputJson:
                for child in elkOutputJson['children']:
                    restoreIFieldValues(child)
            if 'edges' in elkOutputJson:
                for edge in elkOutputJson['edges']:
                    restoreIFieldValues(edge)
        restoreIFieldValues(elkOutputJson)
        elkOutput = json.dumps(elkOutputJson, separators=(',', ':'))

        templateFile = pathlib.Path(__file__).with_name('template.html')
        if args.canvas:
            templateFile = pathlib.Path(__file__).with_name('canvas-template.html')
        template = templateFile.read_text()

        templateParts = template.split("/* Python data goes here */")
        numInsertionPoints = 2
        assert len(templateParts) == numInsertionPoints + 1, f"Expected {numInsertionPoints+1} segments from {numInsertionPoints} insertion points but found {len(templateParts)} segments instead."

        sourcesInfo = ''
        for sourceInfo in sourceFilesCollect:
            filename, text = sourceInfo
            sourcesInfo += f'''sources.set("{filename}", {{
            tokens: {synth.tokensAndWhitespace(text)[:-1]}
        }});\n'''

        elementsToPlace = f'''elementsToPlace = {elkOutput}'''

        template = templateParts[0] + sourcesInfo + templateParts[1] + elementsToPlace + templateParts[2]

    else:
        # Layout components at page load.
        raise Exception("This part of the program is not currently maintained; use the '-a' flag.")

        componentJsonString: 'str' = json.dumps(componentJson, separators=(',', ':')) # the components to feed in

        templateFile = pathlib.Path(__file__).with_name('auto-place-template.html')
        template = templateFile.read_text()

        templateParts = template.split("/* Python data goes here */")
        numInsertionPoints = 2
        assert len(templateParts) == numInsertionPoints + 1, f"Expected {numInsertionPoints+1} segments from {numInsertionPoints} insertion points but found {len(templateParts)} segments instead."

        sourcesInfo = ''
        for sourceInfo in sourceFilesCollect:
            filename, text = sourceInfo
            sourcesInfo += f'''sources.set("{filename}", {{
            tokens: {synth.tokensAndWhitespace(text)[:-1]}
        }});\n'''

        elementsToPlace = f'''elkInput = {componentJsonString}'''

        template = templateParts[0] + sourcesInfo + templateParts[1] + elementsToPlace + templateParts[2]

    # the equivalent of synths's sanitizeParametric
    outputFilename = topLevel.replace("#", "_").replace(",", "_").replace("(", "").replace(")", "").replace(" ", "").replace("\t", "")
    output = currentPath.joinpath(f'{outputFilename}.html')
    print(f"Putting output into {output}")
    output.open("w").write(template)

    print(f"Total time elapsed: {time.time() - total_start_time} seconds")

    if not args.fixed_file:
        serverCaller = absoluteFilePath.with_name("server.js")
        os.system(f'node {serverCaller} {output}')